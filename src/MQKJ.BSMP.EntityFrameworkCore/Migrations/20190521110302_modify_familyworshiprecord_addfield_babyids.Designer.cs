// <auto-generated />
using System;
using MQKJ.BSMP.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MQKJ.BSMP.Migrations
{
    [DbContext(typeof(BSMPDbContext))]
    [Migration("20190521110302_modify_familyworshiprecord_addfield_babyids")]
    partial class modify_familyworshiprecord_addfield_babyids
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeTime");

                    b.Property<byte>("ChangeType");

                    b.Property<long>("EntityChangeSetId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("Reason")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityChangeId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("MQKJ.BSMP.ActiveApply.RiskActiveApply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("BirthDateTime");

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("DeclarationOfDating");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Gender");

                    b.Property<int>("Height");

                    b.Property<string>("Hobbies");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("NickName");

                    b.Property<int>("Season");

                    b.Property<string>("SelfIntroduction");

                    b.Property<string>("Source");

                    b.Property<string>("TeleNumber");

                    b.Property<string>("WechatId");

                    b.HasKey("Id");

                    b.ToTable("RiskActiveApplys");
                });

            modelBuilder.Entity("MQKJ.BSMP.Answers.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("QuestionID");

                    b.Property<int>("QuestionType");

                    b.Property<int>("Sort");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(72);

                    b.HasKey("Id");

                    b.HasIndex("QuestionID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("MQKJ.BSMP.ApplicationLogs.ApplicationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Callsite");

                    b.Property<string>("Exception");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("Logged");

                    b.Property<string>("Logger")
                        .HasMaxLength(250);

                    b.Property<string>("Message")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ApplicationLogs");
                });

            modelBuilder.Entity("MQKJ.BSMP.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("MQKJ.BSMP.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("MQKJ.BSMP.BonusPoints.BonusPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EventDescription");

                    b.Property<string>("EventName");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("PointsCount");

                    b.HasKey("Id");

                    b.ToTable("BonusPoints");
                });

            modelBuilder.Entity("MQKJ.BSMP.BonusPoints.BonusPointRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BonusPointId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("GatherCount");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("PlayerId");

                    b.HasKey("Id");

                    b.HasIndex("BonusPointId");

                    b.HasIndex("PlayerId");

                    b.ToTable("BonusPointRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.BSMPFiles.BSMPFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("FileName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("FilePath")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("NewFileName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<double>("Size");

                    b.Property<string>("ThumbnailImagePath");

                    b.Property<int>("type");

                    b.HasKey("Id");

                    b.ToTable("BSMPFiles");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Asset.BabyAssetAward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BabyFamilyAssetId");

                    b.Property<int?>("BabyId");

                    b.Property<int>("Charm");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EmotionQuotient");

                    b.Property<DateTime?>("ExpiredDateTime");

                    b.Property<int>("FamilyId");

                    b.Property<int>("Imagine");

                    b.Property<int>("Intelligence");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Physique");

                    b.Property<int>("State");

                    b.Property<int>("WillPower");

                    b.HasKey("Id");

                    b.HasIndex("BabyFamilyAssetId");

                    b.HasIndex("BabyId");

                    b.ToTable("BabyAssetAwards");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Athletics.AthleticsInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AthleticsInformationType");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("FamilyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("ReceiverId");

                    b.Property<int>("SeasonManagementId");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("AthleticsInformations");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Athletics.AthleticsReward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BabyPropCount");

                    b.Property<int?>("BabyPropId");

                    b.Property<int?>("BabyPropPriceId");

                    b.Property<int>("Code");

                    b.Property<int>("CoinCount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("RankingNumber");

                    b.Property<int>("RewardPropType");

                    b.HasKey("Id");

                    b.HasIndex("BabyPropId");

                    b.HasIndex("BabyPropPriceId");

                    b.ToTable("AthleticsRewards");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Athletics.AthleticsRewardRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AthleticsRewardId");

                    b.Property<int?>("BabyId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("FamilyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.HasIndex("AthleticsRewardId");

                    b.ToTable("AthleticsRewardRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Athletics.Competition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BabyId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DanGrading");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<int>("FailedCount");

                    b.Property<int>("FamilyId");

                    b.Property<int>("FatherFightCount");

                    b.Property<int>("GamePoint");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MotherFightCount");

                    b.Property<int>("SeasonManagementId");

                    b.Property<int>("WiningCount");

                    b.HasKey("Id");

                    b.HasIndex("BabyId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("SeasonManagementId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Athletics.FightRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AttributeRate");

                    b.Property<int>("BabyAttributeCode");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("CurrentPoint");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<int>("FightResultEnum");

                    b.Property<int>("GamePoint");

                    b.Property<int>("InitiatorBabyId");

                    b.Property<Guid>("InitiatorId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("LastTimePoint");

                    b.Property<int>("OtherBabyId");

                    b.Property<double>("PropAdditionRate");

                    b.Property<double>("RandomNumber");

                    b.Property<int>("SeasonManagementId");

                    b.Property<double>("WinningRatio");

                    b.HasKey("Id");

                    b.HasIndex("InitiatorBabyId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("OtherBabyId");

                    b.HasIndex("SeasonManagementId");

                    b.ToTable("FightRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Athletics.SeasonManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CanPKCount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndTime");

                    b.Property<int>("FatherDefaultFightCount");

                    b.Property<bool>("IsCurrent");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaxFightCount");

                    b.Property<int>("MotherDefaultFightCount");

                    b.Property<int>("Price");

                    b.Property<int>("RankingShowPlayerCount");

                    b.Property<int>("RewardPlayerCount");

                    b.Property<int>("SeasonNumber");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.ToTable("SeasonManagements");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.AutoRunnerConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BabyProperty");

                    b.Property<int>("BuyCount");

                    b.Property<int>("ConsumeLevel");

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("FamilyId");

                    b.Property<int>("FamilyLevel");

                    b.Property<int>("GroupId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LevelAction");

                    b.Property<Guid>("PlayerId");

                    b.Property<int?>("ProfressionId");

                    b.Property<int>("State");

                    b.Property<int>("StudyCount");

                    b.Property<int>("StudyLevel");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ProfressionId");

                    b.ToTable("AutoRunnerConfigs");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.AutoRunnerRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActionType");

                    b.Property<int?>("BabyId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Description");

                    b.Property<int>("FamilyId");

                    b.Property<int>("GroupId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NewData");

                    b.Property<string>("OriginalData");

                    b.Property<Guid>("PlayerId");

                    b.Property<string>("RelateionId");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PlayerId");

                    b.ToTable("AutoRunnerRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Baby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<double>("AgeDouble");

                    b.Property<string>("AgeString");

                    b.Property<int?>("BabyEndingId");

                    b.Property<string>("BirthHospital");

                    b.Property<double>("BirthLength");

                    b.Property<int>("BirthOrder");

                    b.Property<double>("BirthWeight");

                    b.Property<int>("Charm");

                    b.Property<string>("CoverImage");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EmotionQuotient");

                    b.Property<int>("Energy");

                    b.Property<int>("FamilyId");

                    b.Property<int>("Gender");

                    b.Property<int?>("GroupId");

                    b.Property<double>("GrowthTotal");

                    b.Property<int>("Healthy");

                    b.Property<int>("Imagine");

                    b.Property<int>("Intelligence");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLoadBirthMovieMother");

                    b.Property<bool>("IsLookEndingFather");

                    b.Property<bool>("IsLookEndingMother");

                    b.Property<bool>("IsWatchBirthMovieFather");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.Property<int>("Physique");

                    b.Property<int>("Potential");

                    b.Property<int>("State");

                    b.Property<int>("WillPower");

                    b.HasKey("Id");

                    b.HasIndex("BabyEndingId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("GroupId");

                    b.ToTable("Babies");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost");

                    b.Property<int>("CostType");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("BabyActivities");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyActivityRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActivityId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("FamilyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsGet");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("PlayerId");

                    b.Property<Guid>("ReceiverId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("FamilyId");

                    b.ToTable("BabyActivityRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyEnding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aside");

                    b.Property<int?>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<int>("Gender");

                    b.Property<string>("Image");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MaxCharm");

                    b.Property<int>("MaxEmotionQuotient");

                    b.Property<int>("MaxImagine");

                    b.Property<int>("MaxIntelligence");

                    b.Property<int>("MaxPhysique");

                    b.Property<int>("MaxProperty");

                    b.Property<int>("MaxWillPower");

                    b.Property<int>("MinCharm");

                    b.Property<int>("MinEmotionQuotient");

                    b.Property<int>("MinImagine");

                    b.Property<int>("MinIntelligence");

                    b.Property<int>("MinPhysique");

                    b.Property<int>("MinProperty");

                    b.Property<int>("MinWillPower");

                    b.Property<string>("Name");

                    b.Property<int>("StudyMax");

                    b.Property<int>("StudyMin");

                    b.Property<int>("StudyType");

                    b.HasKey("Id");

                    b.ToTable("BabyEndings");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityId");

                    b.Property<double?>("Age");

                    b.Property<string>("AgeString");

                    b.Property<string>("Aside");

                    b.Property<int?>("BabyProperty");

                    b.Property<int?>("Code");

                    b.Property<int>("ConditionType");

                    b.Property<int?>("ConsumeId");

                    b.Property<int>("CountDown");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<int?>("EventId");

                    b.Property<int?>("ExpirationGroupId");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsBlock");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("MaxValue");

                    b.Property<int?>("MinValue");

                    b.Property<string>("Name");

                    b.Property<int>("OperationType");

                    b.Property<int?>("PreEventId");

                    b.Property<int?>("RewardId");

                    b.Property<int?>("StudyAllowMaxTime");

                    b.Property<int?>("StudyType");

                    b.Property<int>("Type");

                    b.Property<int?>("Wage");

                    b.HasKey("Id");

                    b.HasIndex("ConsumeId");

                    b.HasIndex("RewardId");

                    b.ToTable("BabyEvents");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyEventOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BabyEventId");

                    b.Property<int?>("Code");

                    b.Property<int?>("ConsumeId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsProp");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("RewardId");

                    b.Property<int>("Sort");

                    b.HasKey("Id");

                    b.HasIndex("BabyEventId");

                    b.HasIndex("ConsumeId");

                    b.HasIndex("RewardId");

                    b.ToTable("BabyEventOptions");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyEventRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BabyId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime?>("EndTime");

                    b.Property<long?>("EndTimeStamp");

                    b.Property<int>("EventId");

                    b.Property<int>("FamilyId");

                    b.Property<int?>("FatherOptionId");

                    b.Property<int>("GroupId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("MotherOptionId");

                    b.Property<int?>("OptionId");

                    b.Property<Guid>("PlayerId");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("OptionId");

                    b.HasIndex("PlayerId");

                    b.ToTable("BabyEventRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyGrowUpRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BabyId");

                    b.Property<int>("Charm");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EmotionQuotient");

                    b.Property<int>("Energy");

                    b.Property<int>("Healthy");

                    b.Property<int>("Imagine");

                    b.Property<int>("Intelligence");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Physique");

                    b.Property<int>("PlayerGuid");

                    b.Property<Guid?>("PlayerId");

                    b.Property<int>("TriggerType");

                    b.Property<int>("WillPower");

                    b.HasKey("Id");

                    b.ToTable("BabyGrowUpRecords","dbo");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyProp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("BabyPropPropertyAwardId");

                    b.Property<int?>("BabyPropTypeId");

                    b.Property<int>("Code");

                    b.Property<string>("CoverImg");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<double>("Discount");

                    b.Property<string>("DiscountInfo");

                    b.Property<int?>("Gender");

                    b.Property<int>("GetWay");

                    b.Property<bool>("IsAfterBuyPlayMarquees");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInheritAble")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsNewProp");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Level");

                    b.Property<int>("MaxPurchasesNumber");

                    b.Property<string>("Title");

                    b.Property<int?>("TriggerShowPropCode");

                    b.HasKey("Id");

                    b.HasIndex("BabyPropPropertyAwardId");

                    b.HasIndex("BabyPropTypeId");

                    b.ToTable("BabyProps");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyPropBuyTermType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BabyPropTypeId");

                    b.Property<int>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("BabyPropTypeId");

                    b.ToTable("BabyPropBuyTermTypes");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyPropFeatureType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<int>("EventAdditionType");

                    b.Property<int>("Group");

                    b.Property<bool>("IsAddition");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("BabyPropFeatureTypes");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyPropPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BabyPropId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("CurrencyType");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Dsecription");

                    b.Property<string>("Icon");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double>("Price");

                    b.Property<double>("PropValue");

                    b.Property<int>("Sort");

                    b.Property<double>("Validity");

                    b.HasKey("Id");

                    b.HasIndex("BabyPropId");

                    b.ToTable("BabyPropPrices");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyPropType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<int>("EquipmentAbleObject");

                    b.Property<string>("Img");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<bool>("MaxEquipmentCount");

                    b.Property<string>("Name");

                    b.Property<int>("Sort");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("BabyPropTypes");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Backpack.BabyAssetFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssetFeatureProperty");

                    b.Property<int>("BabyId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("FamilyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.ToTable("BabyAssetFeatures");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Backpack.BabyAssetFeatureRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssetFeatureProperty");

                    b.Property<Guid?>("BabyAssetFeatureId");

                    b.Property<int>("BabyId");

                    b.Property<int?>("BabyPropId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("FamilyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastAssetFeatureProperty");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.HasIndex("BabyAssetFeatureId");

                    b.HasIndex("BabyPropId");

                    b.ToTable("BabyAssetFeatureRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Backpack.BabyAssetRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BabyId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EquipmentState");

                    b.Property<Guid>("FamilyAssetId");

                    b.Property<int>("FamilyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.HasIndex("BabyId");

                    b.HasIndex("FamilyAssetId");

                    b.HasIndex("FamilyId");

                    b.ToTable("BabyAssetRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Backpack.BabyFamilyAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BabyPropId");

                    b.Property<int?>("BabyPropPriceId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime?>("ExpiredDateTime");

                    b.Property<int>("FamilyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEquipmenting");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("OwnId");

                    b.HasKey("Id");

                    b.HasIndex("BabyPropId");

                    b.HasIndex("BabyPropPriceId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("OwnId");

                    b.ToTable("BabyFamilyAssets");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BuyFightCountRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BabyId");

                    b.Property<double>("CoinCount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<int?>("FamilyId");

                    b.Property<int>("FightCount");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("PurchaserId");

                    b.Property<int>("SeasonManagementId");

                    b.Property<int>("SourceType");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("PurchaserId");

                    b.HasIndex("SeasonManagementId");

                    b.ToTable("BuyFightCountRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.ChangeProfessionCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cost");

                    b.Property<int>("CostType");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("ProfessionId");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.ToTable("ChangeProfessionCosts");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.CoinRecharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoinCount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsShow");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<decimal>("MoneyAmount");

                    b.Property<int>("RechargeLevel");

                    b.HasKey("Id");

                    b.ToTable("CoinRecharges");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.CoinRechargeRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CoinRechargeId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("FamilyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsVirtualRecharge");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("OrderId");

                    b.Property<int>("RechargeCount");

                    b.Property<int>("RechargeLevel");

                    b.Property<Guid?>("RechargerId");

                    b.Property<int>("SourceType");

                    b.HasKey("Id");

                    b.HasIndex("CoinRechargeId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("RechargerId");

                    b.ToTable("CoinRechargeRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.DismissFamilyRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<int>("DismissFamilyType");

                    b.Property<DateTime>("ExpireTime");

                    b.Property<int>("FamilyId");

                    b.Property<int>("FamilyState");

                    b.Property<Guid?>("InitiatorId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("DismissFamilyRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.EnergyRecharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CointCount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EnergyCount");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.ToTable("EnergyRecharges");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.EnergyRechargeRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BabyId");

                    b.Property<int>("CoinAmount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EnergyCount");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("OrderId");

                    b.Property<Guid?>("RechargerId");

                    b.Property<int>("SourceType");

                    b.HasKey("Id");

                    b.HasIndex("BabyId");

                    b.HasIndex("RechargerId");

                    b.ToTable("EnergyRechargeRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.EventGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("PrevGroupId");

                    b.HasKey("Id");

                    b.HasIndex("PrevGroupId");

                    b.ToTable("EventGroups");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.EventGroupBabyEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EventId");

                    b.Property<int>("GroupId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("GroupId");

                    b.ToTable("EventGroupBabyEvents");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Family", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddOnNote");

                    b.Property<int>("AddOnStatus");

                    b.Property<double>("ChargeAmount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<double>("Deposit");

                    b.Property<string>("Description");

                    b.Property<int>("FamilyState");

                    b.Property<Guid>("FatherId");

                    b.Property<double>("Happiness");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Level");

                    b.Property<Guid>("MotherId");

                    b.Property<int>("Prestiges");

                    b.Property<string>("Remark");

                    b.Property<int>("Type");

                    b.Property<double>("VirtualRecharge");

                    b.HasKey("Id");

                    b.HasIndex("FatherId");

                    b.HasIndex("MotherId");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.FamilyCoinDepositChangeRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int?>("BabyId");

                    b.Property<int>("CostType");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<double>("CurrentFamilyCoinDeposit");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("FamilyId");

                    b.Property<int>("GetWay");

                    b.Property<string>("GoodsId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("StakeholderId");

                    b.HasKey("Id");

                    b.HasIndex("BabyId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("StakeholderId");

                    b.ToTable("FamilyCoinDepositChangeRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.ImportDataRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<double>("Elapsed");

                    b.Property<string>("Exception");

                    b.Property<int>("FileDataType");

                    b.Property<string>("FileName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Size");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.ToTable("ImportDataRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Information", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BabyEventId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("FamilyId");

                    b.Property<string>("Image");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("NoticeType");

                    b.Property<Guid?>("ReceiverId");

                    b.Property<string>("Remark");

                    b.Property<Guid?>("SenderId");

                    b.Property<int>("State");

                    b.Property<int>("SystemInformationType");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("BabyEventId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Informations");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.PlayerProfession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("FamilyId");

                    b.Property<bool>("IsCurrent");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsVirtualRecharge");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("PlayerId");

                    b.Property<int>("ProfessionId");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("PlayerProfessions");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Prestiges.FamilyWorshipRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Coins");

                    b.Property<DateTime>("CreationTime");

                    b.Property<int?>("FromBabyId");

                    b.Property<int>("FromFamilyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Prestiges");

                    b.Property<int?>("ToBabyId");

                    b.Property<int>("ToFamilyId");

                    b.HasKey("Id");

                    b.HasIndex("FromBabyId");

                    b.HasIndex("ToBabyId");

                    b.ToTable("FamilyWorshipRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Prestiges.FamilyWorshipReward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoinsMax");

                    b.Property<int>("CoinsMin");

                    b.Property<DateTime>("CreationTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Prestiges");

                    b.Property<int>("RankMax");

                    b.Property<int>("RankMin");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("FamilyWorshipRewards");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<int>("Gender");

                    b.Property<int>("Grade");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.Property<int?>("ProductId");

                    b.Property<int?>("RewardId");

                    b.Property<double>("Salary");

                    b.Property<double>("SatisfactionDegree");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RewardId");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.PropMall.BabyPropBag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<double>("CurrencyCount");

                    b.Property<int>("CurrencyType");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<int>("Gender");

                    b.Property<string>("Img");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Order");

                    b.Property<double>("PriceGoldCoin");

                    b.Property<decimal>("PriceRMB");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("BabyPropBags");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.PropMall.BabyPropBagAndBabyProp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BabyPropBagId");

                    b.Property<int>("BabyPropId");

                    b.Property<int>("BabyPropPriceId");

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.HasIndex("BabyPropBagId");

                    b.HasIndex("BabyPropId");

                    b.HasIndex("BabyPropPriceId");

                    b.ToTable("BabyPropBagAndBabyProps");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.PropMall.BabyPropFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BabyPropFeatureTypeId");

                    b.Property<int>("BabyPropId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("BabyPropFeatureTypeId");

                    b.HasIndex("BabyPropId");

                    b.ToTable("BabyPropFeatures");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.PropMall.BabyPropPropertyAward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Charm");

                    b.Property<int>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EmotionQuotient");

                    b.Property<int>("EventAdditionType");

                    b.Property<int>("Imagine");

                    b.Property<int>("Intelligence");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Physique");

                    b.Property<int>("WillPower");

                    b.HasKey("Id");

                    b.ToTable("BabyPropPropertyAwards");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.PropMall.BabyPropRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BabyId");

                    b.Property<Guid?>("BabyPropBagId");

                    b.Property<int?>("BabyPropId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("FamilyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("OrderId");

                    b.Property<int>("PropSource");

                    b.Property<Guid?>("PurchaserId");

                    b.Property<string>("Remark");

                    b.HasKey("Id");

                    b.HasIndex("BabyPropBagId");

                    b.HasIndex("BabyPropId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("PurchaserId");

                    b.ToTable("BabyPropRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.PropMall.BabyPropTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BabyPropBuyTermId");

                    b.Property<int>("BabyPropId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("MaxValue");

                    b.Property<int?>("MinValue");

                    b.HasKey("Id");

                    b.HasIndex("BabyPropBuyTermId");

                    b.HasIndex("BabyPropId");

                    b.ToTable("BabyPropTerms");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Charm");

                    b.Property<int?>("Code");

                    b.Property<int>("CoinCount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<int>("EmotionQuotient");

                    b.Property<int>("Energy");

                    b.Property<int>("Happiness");

                    b.Property<int>("Healthy");

                    b.Property<int>("Imagine");

                    b.Property<int>("Intelligence");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.Property<int>("Physique");

                    b.Property<int>("Type");

                    b.Property<int>("WillPower");

                    b.HasKey("Id");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.SupplementCoinRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CoinCount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<int>("FamilyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("OrderId");

                    b.HasKey("Id");

                    b.ToTable("SupplementCoinRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.VersionManage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsForceUpdate");

                    b.Property<bool>("IsPopup");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ReleaseLog");

                    b.Property<string>("Remark");

                    b.Property<int>("TenantId");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.ToTable("VersionManages");
                });

            modelBuilder.Entity("MQKJ.BSMP.Common.EnterpirsePaymentRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AgentId");

                    b.Property<double>("Amount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("OutTradeNo");

                    b.Property<string>("PaymentData");

                    b.Property<string>("PaymentNo");

                    b.Property<DateTime>("PaymentTime");

                    b.Property<string>("RequestData");

                    b.Property<int>("State");

                    b.Property<int>("WithdrawMoneyType");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("EnterpirsePaymentRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.Common.IncomeRecords.IncomeRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<double>("CurrentEarningRatio");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<double>("Income");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MqAgentId");

                    b.Property<Guid?>("OrderId");

                    b.Property<double>("RealIncome");

                    b.Property<int>("RunWaterRecordType");

                    b.Property<int?>("SecondAgentId");

                    b.Property<double>("TaxRate");

                    b.Property<int>("WithdrawMoneyState");

                    b.HasKey("Id");

                    b.HasIndex("MqAgentId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SecondAgentId");

                    b.ToTable("IncomeRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.Common.MqAgents.AgentInviteCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MqAgentCategory");

                    b.Property<int?>("MqAgentId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("MqAgentId");

                    b.ToTable("AgentInviteCodes");
                });

            modelBuilder.Entity("MQKJ.BSMP.Common.OperationActivities.OperationActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityType");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime?>("ExpireDateTime");

                    b.Property<string>("Img");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPopup");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<string>("SubTitle");

                    b.Property<int>("TenantId");

                    b.Property<string>("Title");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("OperationActivities");
                });

            modelBuilder.Entity("MQKJ.BSMP.Common.RunHorseInformations.RunHorseInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime?>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified));

                    b.Property<int>("Interval")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(3);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("PlayCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(-1);

                    b.Property<int>("PlayScene");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("StartTime");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("RunHorseInformations");
                });

            modelBuilder.Entity("MQKJ.BSMP.Common.SensitiveWords.SensitiveWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.ToTable("SensitiveWords");
                });

            modelBuilder.Entity("MQKJ.BSMP.Common.WechatPay.WechatMpUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Gender");

                    b.Property<string>("HeadUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("NickName");

                    b.Property<string>("OpenId");

                    b.Property<string>("Province");

                    b.Property<string>("UnionId");

                    b.HasKey("Id");

                    b.ToTable("MpUsers");
                });

            modelBuilder.Entity("MQKJ.BSMP.Common.WechatPay.WechatPayNotify", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("ErrorMessage");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("NotifyData");

                    b.Property<string>("OutTradeNo");

                    b.Property<string>("TransactionId");

                    b.HasKey("Id");

                    b.ToTable("WechatPayNotifies");
                });

            modelBuilder.Entity("MQKJ.BSMP.Common.WeChatWebUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AccessTokenExpireTime");

                    b.Property<int>("Age");

                    b.Property<string>("City");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Gender");

                    b.Property<string>("HeadUrl");

                    b.Property<string>("Interest");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("NickName");

                    b.Property<string>("OpenId");

                    b.Property<string>("OtherWechatAccount");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Profession");

                    b.Property<string>("Province");

                    b.Property<DateTime>("RefreshTokenExpireTime");

                    b.Property<int>("State");

                    b.Property<string>("UnionId");

                    b.Property<string>("UserName");

                    b.Property<string>("WechatAccount");

                    b.HasKey("Id");

                    b.ToTable("WeChatWebUsers");
                });

            modelBuilder.Entity("MQKJ.BSMP.DramaQuestionLibraryTypes.DramaQuestionLibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DramaId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.HasKey("Id");

                    b.HasIndex("DramaId");

                    b.ToTable("DramaQuestionLibrarys");
                });

            modelBuilder.Entity("MQKJ.BSMP.Dramas.Drama", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DramaType");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.Property<int>("RelationDegree");

                    b.HasKey("Id");

                    b.ToTable("Dramas");
                });

            modelBuilder.Entity("MQKJ.BSMP.Emoticons.EmoticonRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid>("GameTaskId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("PlayerId");

                    b.HasKey("Id");

                    b.HasIndex("GameTaskId");

                    b.HasIndex("PlayerId");

                    b.ToTable("EmoticonRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.Feedbacks.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("PlayerId");

                    b.Property<int>("QuestionId");

                    b.Property<int>("TopicId");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("MQKJ.BSMP.Friends.Friend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Floor");

                    b.Property<Guid>("FriendId");

                    b.Property<int>("HeartCount");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsUrge");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("PlayerId");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("PlayerId", "FriendId")
                        .IsUnique();

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("MQKJ.BSMP.GameRecords.GameRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid>("GameTaskId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("QuestionIds");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("GameTaskId");

                    b.ToTable("GameRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.GameTasks.AnswerQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Floor");

                    b.Property<Guid>("GameTaskId");

                    b.Property<int>("InviteeAnswerId");

                    b.Property<int>("InviteeAnswerSort");

                    b.Property<int>("InviterAnswerId");

                    b.Property<int>("InviterAnswerSort");

                    b.Property<bool>("IsCheat");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("QuesionId");

                    b.Property<bool>("State");

                    b.HasKey("Id");

                    b.HasIndex("GameTaskId");

                    b.HasIndex("QuesionId");

                    b.ToTable("AnswerQuestions");
                });

            modelBuilder.Entity("MQKJ.BSMP.GameTasks.GameTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppointmentContent")
                        .HasMaxLength(300);

                    b.Property<int>("ConnectionState");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("GameType");

                    b.Property<string>("InvitationLink");

                    b.Property<string>("InviteeAppointmentContent")
                        .HasMaxLength(300);

                    b.Property<Guid?>("InviteePlayerId");

                    b.Property<Guid>("InviterPlayerId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("RelationDegree")
                        .HasMaxLength(30);

                    b.Property<int>("SeekType");

                    b.Property<int>("State");

                    b.Property<int>("TaskType");

                    b.Property<int>("ValidInterval");

                    b.HasKey("Id");

                    b.HasIndex("InviteePlayerId");

                    b.HasIndex("InviterPlayerId");

                    b.ToTable("GameTasks");
                });

            modelBuilder.Entity("MQKJ.BSMP.Likes.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("PlayerId");

                    b.Property<int>("QuestionId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("MQKJ.BSMP.LoveCardFiles.LoveCardFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BSMPFileId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("LoveCardId");

                    b.HasKey("Id");

                    b.HasIndex("BSMPFileId");

                    b.HasIndex("LoveCardId");

                    b.ToTable("LoveCardFiles");
                });

            modelBuilder.Entity("MQKJ.BSMP.LoveCardOptions.LoveCardOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLiked");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("LoveCardId");

                    b.Property<int>("LoveCardOptionType");

                    b.Property<Guid>("OptionPlayerId");

                    b.HasKey("Id");

                    b.HasIndex("LoveCardId")
                        .IsUnique();

                    b.HasIndex("OptionPlayerId");

                    b.ToTable("LoveCardOptions");
                });

            modelBuilder.Entity("MQKJ.BSMP.LoveCards.LoveCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardCode");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("LikeCount");

                    b.Property<Guid>("PlayerId");

                    b.Property<int>("SaveCount");

                    b.Property<int>("ShareCount");

                    b.Property<int>("State");

                    b.Property<int>("StyleCode");

                    b.Property<string>("Username");

                    b.Property<int>("ViewsCount");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("LoveCards");
                });

            modelBuilder.Entity("MQKJ.BSMP.MqAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgentWithdrawalRatio");

                    b.Property<double>("Balance");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("GroupId");

                    b.Property<string>("HeadUrl");

                    b.Property<string>("IdCardNumber");

                    b.Property<string>("InviteCode");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Level");

                    b.Property<double>("LockedBalance");

                    b.Property<string>("NickName");

                    b.Property<string>("OpenId");

                    b.Property<string>("ParentInviteCode");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<Guid?>("PlayerId");

                    b.Property<int>("PromoterWithdrawalRatio");

                    b.Property<string>("Source");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<double>("TotalBalance");

                    b.Property<string>("UnionId");

                    b.Property<int?>("UpperLevelMqAgentId");

                    b.Property<string>("UserName");

                    b.Property<int>("WithdrawMoneyState");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UpperLevelMqAgentId");

                    b.ToTable("MqAgents");
                });

            modelBuilder.Entity("MQKJ.BSMP.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsApplyWechat");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("WechatAppId");

                    b.Property<string>("WechatAppSecret");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("MQKJ.BSMP.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BussinessState");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("FamilyId");

                    b.Property<int>("GoodsType");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsWithdrawCash");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("OrderNumber");

                    b.Property<double>("Payment");

                    b.Property<string>("PaymentData");

                    b.Property<DateTime?>("PaymentTime");

                    b.Property<int>("PaymentType");

                    b.Property<Guid?>("PlayerId");

                    b.Property<string>("ProductDescribe");

                    b.Property<int?>("ProductId");

                    b.Property<Guid?>("PropBagId");

                    b.Property<double>("SettlementTotalFee");

                    b.Property<int>("State");

                    b.Property<int>("TenantId");

                    b.Property<string>("TransactionId");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MQKJ.BSMP.PlayerDramas.PlayerDrama", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DramId");

                    b.Property<int?>("DramaId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSkilled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("PlayerId");

                    b.HasKey("Id");

                    b.HasIndex("DramaId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerDramas");
                });

            modelBuilder.Entity("MQKJ.BSMP.PlayerLabels.PlayerLabel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LabelContent");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("LoveCardId");

                    b.HasKey("Id");

                    b.HasIndex("LoveCardId");

                    b.ToTable("PlayerLabels");
                });

            modelBuilder.Entity("MQKJ.BSMP.Players.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AgeRange");

                    b.Property<DateTime>("AuthorizeDateTime");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("ChineseBabyPubOpenId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeviceModel");

                    b.Property<string>("DeviceSystem");

                    b.Property<string>("Domicile");

                    b.Property<int>("Gender");

                    b.Property<string>("HeadUrl");

                    b.Property<Guid?>("InviterId");

                    b.Property<bool>("IsAgenter");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDeveloper");

                    b.Property<bool>("IsSuperMember");

                    b.Property<DateTime>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("ModifyCount");

                    b.Property<string>("NickName");

                    b.Property<string>("OpenId");

                    b.Property<int?>("PlayerExtensionId");

                    b.Property<string>("Profession");

                    b.Property<int>("State");

                    b.Property<int>("TenantId");

                    b.Property<string>("UnionId");

                    b.Property<string>("WeChatAccount");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("MQKJ.BSMP.Players.PlayerExtension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Constellation");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("ExtensionFiled1");

                    b.Property<int>("ExtensionFiled2");

                    b.Property<int>("ExtensionFiled3");

                    b.Property<string>("ExtensionFiled4");

                    b.Property<string>("ExtensionFiled5");

                    b.Property<string>("ExtensionFiled6");

                    b.Property<double>("Height");

                    b.Property<string>("Introduce");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsUnLock");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("LoveScore");

                    b.Property<Guid>("PlayerGuid");

                    b.Property<string>("Profession");

                    b.Property<int>("Stamina");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("PlayerGuid")
                        .IsUnique();

                    b.ToTable("PlayerExtensions");
                });

            modelBuilder.Entity("MQKJ.BSMP.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MQKJ.BSMP.PropUseRecords.PropUseRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("PlayerId");

                    b.Property<int>("PropType");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PropUseRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.QuestionBankRules.QuestionBankRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("ComplexityId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DramaQuestionLibraryId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("SceneId");

                    b.Property<int>("SecretId");

                    b.Property<int>("Sort");

                    b.Property<int>("TopicId");

                    b.HasKey("Id");

                    b.ToTable("QuestionBankRules");
                });

            modelBuilder.Entity("MQKJ.BSMP.QuestionBanks.QuestionBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DramaQuestionLibraryId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LastId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("QuestionId");

                    b.Property<int>("RepeatComplexityCount");

                    b.Property<int>("RepeatSceneCount");

                    b.Property<int>("RepeatSecretCount");

                    b.Property<int>("RepeatTopicCount");

                    b.HasKey("Id");

                    b.HasIndex("DramaQuestionLibraryId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionBanks");
                });

            modelBuilder.Entity("MQKJ.BSMP.Questions.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerCount");

                    b.Property<DateTime?>("AuditDateTime");

                    b.Property<long?>("AuditorId");

                    b.Property<string>("Author");

                    b.Property<string>("BackgroundStoryFemale")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("BackgroundStoryMale")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<DateTime?>("CheckDateTime");

                    b.Property<long?>("CheckOneId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<Guid?>("DefaultImgId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("HomeField");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Pursuer");

                    b.Property<string>("QuestionFemale")
                        .IsRequired()
                        .HasMaxLength(72);

                    b.Property<string>("QuestionMale")
                        .IsRequired()
                        .HasMaxLength(72);

                    b.Property<int>("SceneId");

                    b.Property<int>("Sort");

                    b.Property<byte>("State");

                    b.Property<int>("ViewCount");

                    b.HasKey("Id");

                    b.HasIndex("AuditorId");

                    b.HasIndex("CheckOneId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DefaultImgId");

                    b.HasIndex("SceneId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("MQKJ.BSMP.Questions.QuestionTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("QuestionId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TagId");

                    b.ToTable("QuestionTags");
                });

            modelBuilder.Entity("MQKJ.BSMP.SceneFiles.SceneFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid>("FileId");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("SceneFileName");

                    b.Property<int>("SceneId");

                    b.Property<int>("Sort");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.HasIndex("SceneId")
                        .IsUnique();

                    b.ToTable("SceneFiles");
                });

            modelBuilder.Entity("MQKJ.BSMP.Scenes.Scene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<Guid>("DefaultSceneFileId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(300);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("SceneName")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<int>("SceneTypeId");

                    b.Property<int>("Sort");

                    b.HasKey("Id");

                    b.HasIndex("SceneName")
                        .IsUnique();

                    b.HasIndex("SceneTypeId");

                    b.ToTable("Scenes");
                });

            modelBuilder.Entity("MQKJ.BSMP.SceneTypes.SceneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("SceneTypes");
                });

            modelBuilder.Entity("MQKJ.BSMP.StaminaRecords.StaminaRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("PlayerId");

                    b.Property<int>("StaminaCount");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("StaminaRecords");
                });

            modelBuilder.Entity("MQKJ.BSMP.StoryLines.StoryLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("DramaId");

                    b.Property<int>("DramaQuestionLibraryId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("PlayerAId");

                    b.Property<Guid>("PlayerBId");

                    b.Property<int>("QuestionBankId");

                    b.Property<bool>("isStageCleared");

                    b.HasKey("Id");

                    b.HasIndex("DramaId");

                    b.HasIndex("DramaQuestionLibraryId");

                    b.HasIndex("PlayerAId");

                    b.HasIndex("PlayerBId");

                    b.HasIndex("QuestionBankId");

                    b.ToTable("StoryLines");
                });

            modelBuilder.Entity("MQKJ.BSMP.SystemMessages.SystemMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Code");

                    b.Property<string>("Content")
                        .HasMaxLength(1024);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime>("ExprieDateTime")
                        .HasMaxLength(65);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("NoticeType")
                        .HasMaxLength(65);

                    b.Property<int>("Period");

                    b.Property<int>("PeriodType")
                        .HasMaxLength(65);

                    b.Property<int>("PriorityLevel")
                        .HasMaxLength(65);

                    b.Property<DateTime>("StartDateTime")
                        .HasMaxLength(65);

                    b.HasKey("Id");

                    b.ToTable("SystemMessages");
                });

            modelBuilder.Entity("MQKJ.BSMP.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<string>("GroupName");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("MQKJ.BSMP.Tags.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Sort");

                    b.Property<string>("TagName")
                        .HasMaxLength(50);

                    b.Property<int>("TagTypeId");

                    b.HasKey("Id");

                    b.HasIndex("TagTypeId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MQKJ.BSMP.TagTypes.TagType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("TypeName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TagTypes");
                });

            modelBuilder.Entity("MQKJ.BSMP.TextAudios.TextAudio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Scene");

                    b.Property<int>("Sort");

                    b.HasKey("Id");

                    b.ToTable("TextAudios");
                });

            modelBuilder.Entity("MQKJ.BSMP.UnLocks.Unlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BeUnLockerId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("UnLockerId");

                    b.HasKey("Id");

                    b.ToTable("Unlocks");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");


                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("MQKJ.BSMP.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("MQKJ.BSMP.Authorization.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("MQKJ.BSMP.Authorization.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("MQKJ.BSMP.Authorization.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("MQKJ.BSMP.Authorization.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("MQKJ.BSMP.Authorization.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet")
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange")
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("MQKJ.BSMP.Answers.Answer", b =>
                {
                    b.HasOne("MQKJ.BSMP.Questions.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.Authorization.Roles.Role", b =>
                {
                    b.HasOne("MQKJ.BSMP.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("MQKJ.BSMP.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("MQKJ.BSMP.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("MQKJ.BSMP.Authorization.Users.User", b =>
                {
                    b.HasOne("MQKJ.BSMP.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("MQKJ.BSMP.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("MQKJ.BSMP.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("MQKJ.BSMP.BonusPoints.BonusPointRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.BonusPoints.BonusPoint", "BonusPoint")
                        .WithMany()
                        .HasForeignKey("BonusPointId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Asset.BabyAssetAward", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.Backpack.BabyFamilyAsset", "BabyFamilyAsset")
                        .WithMany()
                        .HasForeignKey("BabyFamilyAssetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Baby", "Baby")
                        .WithMany()
                        .HasForeignKey("BabyId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Athletics.AthleticsInformation", b =>
                {
                    b.HasOne("MQKJ.BSMP.Players.Player", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Athletics.AthleticsReward", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyProp", "BabyProp")
                        .WithMany()
                        .HasForeignKey("BabyPropId");

                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyPropPrice", "BabyPropPrice")
                        .WithMany()
                        .HasForeignKey("BabyPropPriceId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Athletics.AthleticsRewardRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.Athletics.AthleticsReward", "AthleticsReward")
                        .WithMany()
                        .HasForeignKey("AthleticsRewardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Athletics.Competition", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.Baby", "Baby")
                        .WithMany()
                        .HasForeignKey("BabyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Athletics.SeasonManagement", "SeasonManagement")
                        .WithMany()
                        .HasForeignKey("SeasonManagementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Athletics.FightRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.Baby", "InitiatorBaby")
                        .WithMany()
                        .HasForeignKey("InitiatorBabyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Players.Player", "Initiator")
                        .WithMany()
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Baby", "OtherBaby")
                        .WithMany()
                        .HasForeignKey("OtherBabyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Athletics.SeasonManagement", "SeasonManagement")
                        .WithMany()
                        .HasForeignKey("SeasonManagementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.AutoRunnerConfig", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.EventGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfressionId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.AutoRunnerRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.EventGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Baby", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyEnding", "BabyEnding")
                        .WithMany()
                        .HasForeignKey("BabyEndingId");

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Family", "Family")
                        .WithMany("Babies")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.EventGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyActivityRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyActivity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyEvent", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.Reward", "Consume")
                        .WithMany()
                        .HasForeignKey("ConsumeId");

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Reward", "Reward")
                        .WithMany()
                        .HasForeignKey("RewardId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyEventOption", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyEvent", "BabyEvent")
                        .WithMany("Options")
                        .HasForeignKey("BabyEventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Reward", "Consume")
                        .WithMany()
                        .HasForeignKey("ConsumeId");

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Reward", "Reward")
                        .WithMany()
                        .HasForeignKey("RewardId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyEventRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyEvent", "Event")
                        .WithMany("BabyEventRecords")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyEventOption", "Option")
                        .WithMany("BabyEventRecords")
                        .HasForeignKey("OptionId");

                    b.HasOne("MQKJ.BSMP.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyProp", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.PropMall.BabyPropPropertyAward", "BabyPropPropertyAward")
                        .WithMany()
                        .HasForeignKey("BabyPropPropertyAwardId");

                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyPropType", "BabyPropType")
                        .WithMany()
                        .HasForeignKey("BabyPropTypeId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyPropBuyTermType", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyPropType", "BabyPropType")
                        .WithMany()
                        .HasForeignKey("BabyPropTypeId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BabyPropPrice", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyProp", "BabyProp")
                        .WithMany("Prices")
                        .HasForeignKey("BabyPropId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Backpack.BabyAssetFeatureRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.Backpack.BabyAssetFeature")
                        .WithMany("BabyAssetFeatureRecords")
                        .HasForeignKey("BabyAssetFeatureId");

                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyProp", "BabyProp")
                        .WithMany()
                        .HasForeignKey("BabyPropId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Backpack.BabyAssetRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.Baby", "Baby")
                        .WithMany()
                        .HasForeignKey("BabyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Backpack.BabyFamilyAsset", "FamilyAsset")
                        .WithMany("BabyAssetRecords")
                        .HasForeignKey("FamilyAssetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Backpack.BabyFamilyAsset", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyProp", "BabyProp")
                        .WithMany()
                        .HasForeignKey("BabyPropId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyPropPrice", "BabyPropPrice")
                        .WithMany()
                        .HasForeignKey("BabyPropPriceId");

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Baby", "Own")
                        .WithMany()
                        .HasForeignKey("OwnId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.BuyFightCountRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId");

                    b.HasOne("MQKJ.BSMP.Players.Player", "Purchaser")
                        .WithMany()
                        .HasForeignKey("PurchaserId");

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Athletics.SeasonManagement", "SeasonManagement")
                        .WithMany()
                        .HasForeignKey("SeasonManagementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.ChangeProfessionCost", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.Profession", "Profession")
                        .WithMany("Costs")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.CoinRechargeRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.CoinRecharge", "CoinRecharge")
                        .WithMany()
                        .HasForeignKey("CoinRechargeId");

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Players.Player", "Recharger")
                        .WithMany()
                        .HasForeignKey("RechargerId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.DismissFamilyRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.EnergyRechargeRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.Baby", "Baby")
                        .WithMany()
                        .HasForeignKey("BabyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Players.Player", "Recharger")
                        .WithMany()
                        .HasForeignKey("RechargerId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.EventGroup", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.EventGroup", "PrevGroup")
                        .WithMany()
                        .HasForeignKey("PrevGroupId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.EventGroupBabyEvent", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyEvent", "BabyEvent")
                        .WithMany("EventGroupBabyEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.EventGroup", "EventGroup")
                        .WithMany("EventGroupBabyEvent")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Family", b =>
                {
                    b.HasOne("MQKJ.BSMP.Players.Player", "Father")
                        .WithMany("FamilyFathers")
                        .HasForeignKey("FatherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Players.Player", "Mother")
                        .WithMany("FamilyMothers")
                        .HasForeignKey("MotherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.FamilyCoinDepositChangeRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.Baby", "Baby")
                        .WithMany()
                        .HasForeignKey("BabyId");

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Players.Player", "Stakeholder")
                        .WithMany()
                        .HasForeignKey("StakeholderId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Information", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyEvent", "BabyEvent")
                        .WithMany()
                        .HasForeignKey("BabyEventId");

                    b.HasOne("MQKJ.BSMP.Players.Player", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("MQKJ.BSMP.Players.Player", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.PlayerProfession", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Prestiges.FamilyWorshipRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.Baby", "FromBaby")
                        .WithMany()
                        .HasForeignKey("FromBabyId");

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Baby", "ToBaby")
                        .WithMany()
                        .HasForeignKey("ToBabyId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.Profession", b =>
                {
                    b.HasOne("MQKJ.BSMP.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Reward", "Reward")
                        .WithMany()
                        .HasForeignKey("RewardId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.PropMall.BabyPropBagAndBabyProp", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.PropMall.BabyPropBag", "BabyPropBag")
                        .WithMany("BabyPropBagAndBabyProps")
                        .HasForeignKey("BabyPropBagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyProp", "BabyProp")
                        .WithMany()
                        .HasForeignKey("BabyPropId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyPropPrice", "BabyPropPrice")
                        .WithMany()
                        .HasForeignKey("BabyPropPriceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.PropMall.BabyPropFeature", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyPropFeatureType", "BabyPropFeatureType")
                        .WithMany()
                        .HasForeignKey("BabyPropFeatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyProp", "BabyProp")
                        .WithMany("BabyPropFeatures")
                        .HasForeignKey("BabyPropId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.PropMall.BabyPropRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.PropMall.BabyPropBag", "BabyPropBag")
                        .WithMany()
                        .HasForeignKey("BabyPropBagId");

                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyProp", "BabyProp")
                        .WithMany()
                        .HasForeignKey("BabyPropId");

                    b.HasOne("MQKJ.BSMP.ChineseBabies.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Players.Player", "Purchaser")
                        .WithMany()
                        .HasForeignKey("PurchaserId");
                });

            modelBuilder.Entity("MQKJ.BSMP.ChineseBabies.PropMall.BabyPropTerm", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyPropBuyTermType", "BabyPropBuyTerm")
                        .WithMany()
                        .HasForeignKey("BabyPropBuyTermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.ChineseBabies.BabyProp", "BabyProp")
                        .WithMany("BabyPropTerms")
                        .HasForeignKey("BabyPropId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.Common.EnterpirsePaymentRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.MqAgent", "MqAgent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.Common.IncomeRecords.IncomeRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.MqAgent", "MqAgent")
                        .WithMany()
                        .HasForeignKey("MqAgentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("MQKJ.BSMP.MqAgent", "SecondAgent")
                        .WithMany()
                        .HasForeignKey("SecondAgentId");
                });

            modelBuilder.Entity("MQKJ.BSMP.Common.MqAgents.AgentInviteCode", b =>
                {
                    b.HasOne("MQKJ.BSMP.MqAgent", "MqAgent")
                        .WithMany()
                        .HasForeignKey("MqAgentId");
                });

            modelBuilder.Entity("MQKJ.BSMP.DramaQuestionLibraryTypes.DramaQuestionLibrary", b =>
                {
                    b.HasOne("MQKJ.BSMP.Dramas.Drama", "Drama")
                        .WithMany("DramaQuestionLibrarys")
                        .HasForeignKey("DramaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.Emoticons.EmoticonRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.GameTasks.GameTask", "GameTask")
                        .WithMany()
                        .HasForeignKey("GameTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.Friends.Friend", b =>
                {
                    b.HasOne("MQKJ.BSMP.Players.Player", "MyFriend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.GameRecords.GameRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.GameTasks.GameTask", "GameTask")
                        .WithMany()
                        .HasForeignKey("GameTaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.GameTasks.AnswerQuestion", b =>
                {
                    b.HasOne("MQKJ.BSMP.GameTasks.GameTask", "GameTask")
                        .WithMany()
                        .HasForeignKey("GameTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Questions.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuesionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.GameTasks.GameTask", b =>
                {
                    b.HasOne("MQKJ.BSMP.Players.Player", "Invitee")
                        .WithMany("GameTaskInvitees")
                        .HasForeignKey("InviteePlayerId");

                    b.HasOne("MQKJ.BSMP.Players.Player", "Inviter")
                        .WithMany("GameTaskInviters")
                        .HasForeignKey("InviterPlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.LoveCardFiles.LoveCardFile", b =>
                {
                    b.HasOne("MQKJ.BSMP.BSMPFiles.BSMPFile", "BSMPFile")
                        .WithMany()
                        .HasForeignKey("BSMPFileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.LoveCards.LoveCard", "LoveCard")
                        .WithMany("LoveCardFiles")
                        .HasForeignKey("LoveCardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.LoveCardOptions.LoveCardOption", b =>
                {
                    b.HasOne("MQKJ.BSMP.LoveCards.LoveCard")
                        .WithOne("LoveCardOption")
                        .HasForeignKey("MQKJ.BSMP.LoveCardOptions.LoveCardOption", "LoveCardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Players.Player", "OptionPlayer")
                        .WithMany()
                        .HasForeignKey("OptionPlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.LoveCards.LoveCard", b =>
                {
                    b.HasOne("MQKJ.BSMP.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.MqAgent", b =>
                {
                    b.HasOne("MQKJ.BSMP.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("MQKJ.BSMP.MultiTenancy.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("MQKJ.BSMP.MqAgent", "UpperLevelMqAgent")
                        .WithMany()
                        .HasForeignKey("UpperLevelMqAgentId");
                });

            modelBuilder.Entity("MQKJ.BSMP.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("MQKJ.BSMP.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("MQKJ.BSMP.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("MQKJ.BSMP.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("MQKJ.BSMP.Orders.Order", b =>
                {
                    b.HasOne("MQKJ.BSMP.ChineseBabies.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId");

                    b.HasOne("MQKJ.BSMP.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("MQKJ.BSMP.PlayerDramas.PlayerDrama", b =>
                {
                    b.HasOne("MQKJ.BSMP.Dramas.Drama", "Drama")
                        .WithMany("PlayerDramas")
                        .HasForeignKey("DramaId");

                    b.HasOne("MQKJ.BSMP.Players.Player", "Player")
                        .WithMany("PlayerDramas")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.PlayerLabels.PlayerLabel", b =>
                {
                    b.HasOne("MQKJ.BSMP.LoveCards.LoveCard")
                        .WithMany("PlayerLabels")
                        .HasForeignKey("LoveCardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.Players.PlayerExtension", b =>
                {
                    b.HasOne("MQKJ.BSMP.Players.Player", "Player")
                        .WithOne("PlayerExtension")
                        .HasForeignKey("MQKJ.BSMP.Players.PlayerExtension", "PlayerGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.PropUseRecords.PropUseRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.QuestionBanks.QuestionBank", b =>
                {
                    b.HasOne("MQKJ.BSMP.DramaQuestionLibraryTypes.DramaQuestionLibrary", "DramaQuestionLibrary")
                        .WithMany("QuestionBanks")
                        .HasForeignKey("DramaQuestionLibraryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Questions.Question", "Question")
                        .WithMany("QuestionBanks")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.Questions.Question", b =>
                {
                    b.HasOne("MQKJ.BSMP.Authorization.Users.User", "Auditor")
                        .WithMany("QuestionAuditors")
                        .HasForeignKey("AuditorId");

                    b.HasOne("MQKJ.BSMP.Authorization.Users.User", "CheckOne")
                        .WithMany("QuestionCheckOnes")
                        .HasForeignKey("CheckOneId");

                    b.HasOne("MQKJ.BSMP.Authorization.Users.User", "Creator")
                        .WithMany("QuestionCreators")
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("MQKJ.BSMP.BSMPFiles.BSMPFile", "DefaultImg")
                        .WithMany("Questions")
                        .HasForeignKey("DefaultImgId")
                        .HasConstraintName("FK_Questions_BSMPFiles_DefaultImgId");

                    b.HasOne("MQKJ.BSMP.Scenes.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.Questions.QuestionTag", b =>
                {
                    b.HasOne("MQKJ.BSMP.Questions.Question", "Question")
                        .WithMany("QuestionTags")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Tags.Tag", "Tag")
                        .WithMany("QuestionTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.SceneFiles.SceneFile", b =>
                {
                    b.HasOne("MQKJ.BSMP.BSMPFiles.BSMPFile", "File")
                        .WithOne("SceneFile")
                        .HasForeignKey("MQKJ.BSMP.SceneFiles.SceneFile", "FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Scenes.Scene", "Scene")
                        .WithOne("SceneFile")
                        .HasForeignKey("MQKJ.BSMP.SceneFiles.SceneFile", "SceneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.Scenes.Scene", b =>
                {
                    b.HasOne("MQKJ.BSMP.SceneTypes.SceneType", "Type")
                        .WithMany()
                        .HasForeignKey("SceneTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.StaminaRecords.StaminaRecord", b =>
                {
                    b.HasOne("MQKJ.BSMP.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.StoryLines.StoryLine", b =>
                {
                    b.HasOne("MQKJ.BSMP.Dramas.Drama")
                        .WithMany("StoryLines")
                        .HasForeignKey("DramaId");

                    b.HasOne("MQKJ.BSMP.DramaQuestionLibraryTypes.DramaQuestionLibrary", "DramaQuestionLibrary")
                        .WithMany("StroLines")
                        .HasForeignKey("DramaQuestionLibraryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Players.Player", "PlayerA")
                        .WithMany("StoryLinesPlayerA")
                        .HasForeignKey("PlayerAId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.Players.Player", "PlayerB")
                        .WithMany("StoryLinesPlayerB")
                        .HasForeignKey("PlayerBId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MQKJ.BSMP.QuestionBanks.QuestionBank", "QuestionBank")
                        .WithMany("StoryLines")
                        .HasForeignKey("QuestionBankId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MQKJ.BSMP.Tags.Tag", b =>
                {
                    b.HasOne("MQKJ.BSMP.TagTypes.TagType", "TagType")
                        .WithMany("Tags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("MQKJ.BSMP.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("MQKJ.BSMP.Authorization.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
